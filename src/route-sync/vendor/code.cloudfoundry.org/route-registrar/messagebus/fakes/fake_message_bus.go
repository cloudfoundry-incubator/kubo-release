// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/route-registrar/config"
	"code.cloudfoundry.org/route-registrar/messagebus"
)

type FakeMessageBus struct {
	ConnectStub        func(servers []config.MessageBusServer) error
	connectMutex       sync.RWMutex
	connectArgsForCall []struct {
		servers []config.MessageBusServer
	}
	connectReturns struct {
		result1 error
	}
	SendMessageStub        func(subject string, host string, route config.Route, privateInstanceId string) error
	sendMessageMutex       sync.RWMutex
	sendMessageArgsForCall []struct {
		subject           string
		host              string
		route             config.Route
		privateInstanceId string
	}
	sendMessageReturns struct {
		result1 error
	}
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
}

func (fake *FakeMessageBus) Connect(servers []config.MessageBusServer) error {
	fake.connectMutex.Lock()
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct {
		servers []config.MessageBusServer
	}{servers})
	fake.connectMutex.Unlock()
	if fake.ConnectStub != nil {
		return fake.ConnectStub(servers)
	} else {
		return fake.connectReturns.result1
	}
}

func (fake *FakeMessageBus) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *FakeMessageBus) ConnectArgsForCall(i int) []config.MessageBusServer {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return fake.connectArgsForCall[i].servers
}

func (fake *FakeMessageBus) ConnectReturns(result1 error) {
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageBus) SendMessage(subject string, host string, route config.Route, privateInstanceId string) error {
	fake.sendMessageMutex.Lock()
	fake.sendMessageArgsForCall = append(fake.sendMessageArgsForCall, struct {
		subject           string
		host              string
		route             config.Route
		privateInstanceId string
	}{subject, host, route, privateInstanceId})
	fake.sendMessageMutex.Unlock()
	if fake.SendMessageStub != nil {
		return fake.SendMessageStub(subject, host, route, privateInstanceId)
	} else {
		return fake.sendMessageReturns.result1
	}
}

func (fake *FakeMessageBus) SendMessageCallCount() int {
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	return len(fake.sendMessageArgsForCall)
}

func (fake *FakeMessageBus) SendMessageArgsForCall(i int) (string, string, config.Route, string) {
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	return fake.sendMessageArgsForCall[i].subject, fake.sendMessageArgsForCall[i].host, fake.sendMessageArgsForCall[i].route, fake.sendMessageArgsForCall[i].privateInstanceId
}

func (fake *FakeMessageBus) SendMessageReturns(result1 error) {
	fake.SendMessageStub = nil
	fake.sendMessageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageBus) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeMessageBus) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

var _ messagebus.MessageBus = new(FakeMessageBus)
