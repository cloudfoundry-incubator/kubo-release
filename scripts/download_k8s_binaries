#!/usr/bin/env bash
set -e

main() {
  local staging_dir kubernetes_version
  kubernetes_version=$1

  if [ $# -ne 1 ]; then
    echo "Usage: $(basename "$0") [KUBERNETES VERSION]"
    exit  1
  fi

  staging_dir=$(mktemp -d)

  trap '{ rm -rf "$staging_dir"; }' EXIT

  binaries=(
    "kube-apiserver"
    "kube-controller-manager"
    "kube-proxy"
    "kube-scheduler"
    "kubectl"
    "kubelet"
  )

  pushd "$(dirname "${BASH_SOURCE[0]}")/.."
    existing_k8s_spec=$(bosh blobs --column path | grep kubelet | grep -o -E 'kubernetes-([0-9]+\.)+[0-9]+')
    existing_k8s_version=$(echo "$existing_k8s_spec" | grep -o -E '([0-9]+\.)+[0-9]+')

    if [ "$existing_k8s_version" == "$kubernetes_version" ]; then
        echo "Kubernetes version already up-to-date."
    else
      pushd packages/kubernetes
        sed -E -i -e "s/([0-9]+\.)+[0-9]+/${kubernetes_version}/" packaging
        sed -E -i -e "s/${existing_k8s_spec}/kubernetes-${kubernetes_version}/" spec
      popd

      for binary in "${binaries[@]}"; do
        download "${binary}" "${staging_dir}" "${kubernetes_version}"
        add_blob "${binary}" "${staging_dir}" "${kubernetes_version}"
      done
    fi

  popd
}

download() {
  local binary_name staging_dir kubernetes_version
  binary_name="$1"
  staging_dir="$2"
  kubernetes_version="$3"

  wget -O "${staging_dir}/${binary_name}" "https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/linux/amd64/${binary_name}"
}

add_blob() {
  local binary_name blob_name staging_dir kubernetes_version
  binary_name="$1"
  staging_dir="$2"
  kubernetes_version="$3"
  blob_name=$(bosh blobs --column path | grep "$binary_name" | xargs)

  bosh remove-blob "$blob_name"
  bosh add-blob "${staging_dir}/${binary_name}" "kubernetes-${kubernetes_version}/$binary_name"
}

main "$@"
