trap { $host.SetShouldExit(1) }

$env:PATH+=";C:\var\vcap\packages\docker\docker\;"

<% iaas = nil %>
<% if_p('cloud-provider') do |cloud_provider| %>
  <% iaas = cloud_provider %>
  $cloud_provider="<%= cloud_provider %>"
<% end %>

<% if_link('cloud-provider') do |cloud_provider| %>
    $cloud_config="/var/vcap/jobs/kubelet-windows/config/cloud-provider.ini"
    <% cloud_provider.if_p('cloud-provider.gce.service_key') do |service_key| %>
      $env:GOOGLE_APPLICATION_CREDENTIALS="/var/vcap/jobs/kubelet-windows/config/service_key.json"
    <% end %>
    <% cloud_provider.if_p('cloud-provider.aws.access_key_id') do |access_key_id| %>
      $env:AWS_ACCESS_KEY_ID="<%= access_key_id %>"
    <% end %>
    <% cloud_provider.if_p('cloud-provider.aws.secret_access_key') do |secret_access_key| %>
      $env:AWS_SECRET_ACCESS_KEY="<%= secret_access_key %>"
    <% end %>
<% end %>

<%
  labels = ["spec.ip=#{spec.ip}","bosh.id=#{spec.id}","bosh.zone=#{spec.az}"]
  if iaas=="vsphere"
    labels << "failure-domain.beta.kubernetes.io/zone=#{spec.az}"
  end

  if_p('k8s-args') do |args|
    custom_labels = args.fetch('node-labels', "").split(",")
    labels = custom_labels + labels
    args.delete('node-labels')
  end

  labels = labels.join(',')
%>

<% if_p('http_proxy') do |http_proxy| %>
$env:HTTP_PROXY=<%= http_proxy %>
<% end %>
<% if_p('https_proxy') do |https_proxy| %>
$env:HTTPS_PROXY=<%= https_proxy %>
<% end %>
<% if_p('no_proxy') do |no_proxy| %>
$env:NO_PROXY=<%= no_proxy %>
<% end %>

function delete_stale_drained_node {
  $nodes=(/var/vcap/packages/kubernetes-windows/bin/kubectl --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain get nodes -o json | ConvertFrom-Json).Items
  $nodes | ForEach-Object {
    if ($_.metadata.labels."bosh.id" -eq "<= spec.id %>") {
      if (($_.status.conditions | ? type -eq "Ready").status -ne "True") {
        /var/vcap/packages/kubernetes-windows/bin/kubectl --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain delete node "${node_name}" --ignore-not-found
      }
    }
  }
}

function get_hostname_override {
  if ($cloud_provider -in "gce", "azure") {
    return ""
  } else {
    return "<%= spec.ip %>"
  }
}

function start_kubelet {
  <%-
    include_config = false
    if !iaas.nil? and iaas != "vsphere"
      if_link('cloud-provider') do
        include_config = true
      end
    end
  -%>
  mkdir -force C:\tmp # workaround for conformance tests

  /var/vcap/packages/kubernetes-windows/bin/kubelet `
  <%-
    if_p('k8s-args') do |args|
      args.each do |flag, value|
        valueString = ""

        if value.nil?
          # Do nothing to supports args-less flags (--example)
        elsif value.is_a? Array
          valueString = "=#{value.join(",")}"
        elsif value.is_a? Hash
          valueString = "=#{value.map { |k,v| "#{k}=#{v}" }.join(",")}"
        else
          valueString = "=#{value}"
        end
  -%>
    <%= "--#{flag}#{valueString}" %> `
  <%-
      end
    end
  -%>
    <% if include_config -%>--cloud-config=${cloud_config}<% end %> `
    <% if !iaas.nil? -%>--cloud-provider=${cloud_provider}<% end %> `
    --hostname-override=$(get_hostname_override) `
    --node-labels=<%= labels %> `
    --config="/var/vcap/jobs/kubelet-windows/config/kubeletconfig.yml"
}

function check_for_networking {
  $subnetConfig="/run/flannel/subnet.env"

  if (-not ([System.IO.File]::Exists($subnetConfig)))
  {
    throw "$subnetConfig does not exist, waiting for flannel initialization"
  }
}

function load_base_images {
  # Temporary workaround until we bring our own images
  docker version
  if (-not $?) {
    throw "docker is not available"
  }

  docker pull mcr.microsoft.com/windows/nanoserver:1809
  docker tag (docker images mcr.microsoft.com/windows/nanoserver:1809 -q) mcr.microsoft.com/windows/nanoserver
  docker build -t kubeletwin/pause /var/vcap/jobs/kubelet-windows/config

  Start-Job -ScriptBlock {
    docker pull mcr.microsoft.com/windows/servercore:ltsc2019
    docker tag (docker images mcr.microsoft.com/windows/servercore:ltsc2019 -q) mcr.microsoft.com/windows/servercore
  }
}

function set_acls {
  $ar = New-Object System.Security.AccessControl.FileSystemAccessRule("BUILTIN\Users", "ReadAndExecute,CreateFiles,AppendData", "ContainerInherit, ObjectInherit", "None", "Allow")
  $acl = Get-Acl C:\var
  $acl.SetAccessRule($ar)
  Set-Acl C:\var $acl
}

function main {
  delete_stale_drained_node
  check_for_networking
  load_base_images
  set_acls
  start_kubelet
}

main
