#!/bin/bash -ex

NAME="${0##*/}"

export PATH=/var/vcap/packages/kubernetes/bin/:$PATH

RUN_DIR=/var/vcap/sys/run/kubernetes
PIDFILE=$RUN_DIR/kube-controller-manager.pid
LOG_DIR=/var/vcap/sys/log/kube-controller-manager

if [ -e /var/vcap/jobs/cloud-provider/bin/cloud-provider_utils ]; then
  . /var/vcap/jobs/cloud-provider/bin/cloud-provider_utils
  set_cloud_provider
  cloud_config="/var/vcap/jobs/cloud-provider/config/cloud-provider.ini"
else
  cloud_provider=""
  cloud_config=""
fi

# shellcheck disable=SC1091
. /var/vcap/packages/pid_utils/pid_utils.sh

setup_directories() {
  mkdir -p "$RUN_DIR" "$LOG_DIR"
  chown -R vcap:vcap "$RUN_DIR" "$LOG_DIR"
}

send_process_stdout_to_logfile() {
  exec 1>> "$LOG_DIR/$NAME.stdout.log"
}

send_process_stderr_to_logfile() {
  exec 2>> "$LOG_DIR/$NAME.stderr.log"
}

start_kube_controller_manager() {

  if [ "${cloud_provider}" != "" ] && [ -f /sys/class/dmi/id/product_serial ]; then
    chmod a+r /sys/class/dmi/id/product_serial
  fi

  exec chpst -u vcap:vcap  \
    kube-controller-manager \
      --allocate-node-cidrs=true \
      --cloud-config=${cloud_config} \
      --cloud-provider=${cloud_provider} \
      --cluster-cidr=10.200.0.0/16 \
      --cluster-name=kubernetes \
      --kubeconfig=/var/vcap/jobs/kube-controller-manager/config/kubeconfig \
      --leader-elect=true \
      --root-ca-file=/var/vcap/jobs/kube-controller-manager/config/ca.pem \
      --service-account-private-key-file=/var/vcap/jobs/kube-apiserver/config/kubernetes-key.pem \
      --service-cluster-ip-range=10.100.200.0/24 \
      --use-service-account-credentials \
      --v=<%=p('logging-level') %> \
    1>> $LOG_DIR/kube_controller_manager.stdout.log \
    2>> $LOG_DIR/kube_controller_manager.stderr.log
}

stop_kube_controller_manager() {
  kill_and_wait "$PIDFILE"
}

pid() {
  head -1 "$PIDFILE"
}

stop_associated_logging_processes() {
  # shellcheck disable=SC2046
  pkill -g $(get_group_pid)
}

get_group_pid() {
  ps -ho pgrp "$(pid)"
}

case $1 in

  start)
    setup_directories
    send_process_stdout_to_logfile
    send_process_stderr_to_logfile

    pid_guard "$PIDFILE" "Kubernetes Controller Manager"

    echo $$ > $PIDFILE
    start_kube_controller_manager
    ;;

  stop)
    stop_associated_logging_processes
    stop_kube_controller_manager
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    ;;

esac
