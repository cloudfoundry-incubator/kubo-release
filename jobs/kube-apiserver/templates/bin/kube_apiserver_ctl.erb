#!/bin/bash -ex

NAME="${0##*/}"

export PATH=/var/vcap/packages/kubernetes/bin/:$PATH

RUN_DIR=/var/vcap/sys/run/kubernetes
PIDFILE=$RUN_DIR/kube-apiserver.pid
LOG_DIR=/var/vcap/sys/log/kube-apiserver
CONFIG_DIR=/var/vcap/jobs/kube-apiserver/config
AUDIT_LOG_FILE="${LOG_DIR}/audit.log"

# shellcheck disable=SC1091
. /var/vcap/packages/pid_utils/pid_utils.sh
.  /var/vcap/packages/kubo-common/utils.sh

setup_directories() {
  mkdir -p "$RUN_DIR" "$LOG_DIR"
  chown -R vcap:vcap "$RUN_DIR" "$LOG_DIR"
}

send_process_stdout_to_logfile() {
  exec 1>> "$LOG_DIR/$NAME.stdout.log"
}

send_process_stderr_to_logfile() {
  exec 2>> "$LOG_DIR/$NAME.stderr.log"
}

start_kube_apiserver() {
  detect_cloud_config
  check_and_chmod_product_serial $cloud_provider

<%
  etcd_endpoints = link("etcd").instances.map do |instance|
    # See kubo-dns-aliases/dns/aliases.json
    node_name = "#{instance.name.gsub('_','-')}-#{instance.index}"
    etcd_advertise_urls_dns_suffix = link('etcd').p('etcd.advertise_urls_dns_suffix')
    "https://#{node_name}.#{etcd_advertise_urls_dns_suffix}:4001"
  end.join(',')
  api_server_count = link("kube-apiserver").instances.size
  authorization_mode = p('authorization-mode').downcase

  authorization_flags = if authorization_mode == 'abac'
    <<-FLAGS
      --authorization-mode=ABAC \\
      --authorization-policy-file="$CONFIG_DIR/authorization_policy.jsonl" \\
    FLAGS
  elsif authorization_mode == 'rbac'
    <<-FLAGS
      --authorization-mode=RBAC \\
      --runtime-config=api/v1,rbac.authorization.k8s.io/v1alpha1 \\
    FLAGS
  else
    raise "Unsupported authorization mode #{authorization_mode}. Supported modes: abac, rbac"
  end

  audit_flags = if p('enable_audit_logs')
   <<-FLAGS
    --audit-log-path="$AUDIT_LOG_FILE" \\
    --audit-log-maxage=0 \\
    --audit-log-maxsize=0 \\
    --audit-log-maxbackup=0 \\
    --audit-policy-file="$CONFIG_DIR/audit_policy.yml" \\
    FLAGS
  else
    ""
  end

  admission_control_options = [
    "DenyEscalatingExec", "LimitRanger", "NamespaceExists",
    "NamespaceLifecycle","ResourceQuota","ServiceAccount",
    "DefaultStorageClass"]

  if !p('allow_privileged')
    admission_control_options.push("SecurityContextDeny")
  end
%>


  <% if_p('http_proxy') do |http_proxy| %>
  export http_proxy=<%= http_proxy %>
  export HTTP_PROXY=<%= http_proxy %>
  <% end %>
  <% if_p('https_proxy') do |https_proxy| %>
  export https_proxy=<%= https_proxy %>
  export HTTPS_PROXY=<%= https_proxy %>
  <% end %>
  <% if_p('no_proxy') do |no_proxy| %>
  export no_proxy=<%= no_proxy %>
  export NO_PROXY=<%= no_proxy %>
  <% end %>

  exec chpst -u vcap:vcap  \
    kube-apiserver \
      --admission-control=<%= admission_control_options.join(",") %> \
      --anonymous-auth=false \
      --allow-privileged=<%= p('allow_privileged') %> \
      --apiserver-count=<%= api_server_count %> \
      <%= audit_flags %> \
      <%= authorization_flags %> \
      --bind-address=0.0.0.0 \
      --cloud-provider=${cloud_provider} \
      --cloud-config="${cloud_config}" \
      --enable-swagger-ui=true \
      --etcd-servers=<%= etcd_endpoints %> \
      --etcd-cafile="$CONFIG_DIR/etcd-ca.crt" \
      --etcd-certfile="$CONFIG_DIR/etcd-client.crt" \
      --etcd-keyfile="$CONFIG_DIR/etcd-client.key" \
      --insecure-port=0 \
      --kubelet-https=true \
      --profiling=false \
      --repair-malformed-updates=false \
      --secure-port=8443 \
      --service-account-key-file="$CONFIG_DIR/service-account-public-key.pem" \
      --service-account-lookup=true \
      --service-cluster-ip-range=10.100.200.0/24 \
      --service-node-port-range=30000-32767 \
      --tls-cert-file="$CONFIG_DIR/kubernetes.pem" \
      --tls-private-key-file="$CONFIG_DIR/kubernetes-key.pem" \
      --token-auth-file="$CONFIG_DIR/tokens.csv" \
      --storage-media-type=application/json \
      <% if authorization_mode == 'rbac' %>\
      --client-ca-file="$CONFIG_DIR/kubernetes.pem" \
      --proxy-client-cert-file="$CONFIG_DIR/kubernetes.pem" \
      --proxy-client-key-file="$CONFIG_DIR/kubernetes-key.pem" \
      --requestheader-allowed-names=aggregator \
      --requestheader-client-ca-file="$CONFIG_DIR/kubernetes.pem" \
      --requestheader-extra-headers-prefix=X-Remote-Extra- \
      --requestheader-group-headers=X-Remote-Group \
      --requestheader-username-headers=X-Remote-User \
      <% end %>\
      --enable-aggregator-routing=true \
      --v=<%=p('logging-level') %> \
      <% if_p("oidc.issuer-url", "oidc.client-id") do |oidc_issuer_url, oidc_client_id| %> \
      --oidc-issuer-url="<%= oidc_issuer_url %>" \
      --oidc-client-id="<%= oidc_client_id %>" \
      <% if_p("oidc.username-claim") do |oidc_username_claim| %> \
      --oidc-username-claim="<%= oidc_username_claim %>" \
      <% end %> \
      <% if_p("oidc.username-prefix") do |oidc_username_prefix| %> \
      --oidc-username-prefix="<%= oidc_username_prefix %>" \
      <% end %> \
      <% if_p("oidc.groups-claim") do |oidc_groups_claim| %> \
      --oidc-groups-claim="<%= oidc_groups_claim %>" \
      <% end %> \
      <% if_p("oidc.groups-prefix") do |oidc_groups_prefix| %> \
      --oidc-groups-prefix="<%= oidc_groups_prefix %>" \
      <% end %> \
      <% if_p("oidc.ca") do %> \
      --oidc-ca-file="/var/vcap/jobs/kube-apiserver/config/oidc-ca.pem" \
      <% end %> \
      <% end %> \
    1>> $LOG_DIR/kube_apiserver.stdout.log \
    2>> $LOG_DIR/kube_apiserver.stderr.log
}

stop_kube_apiserver() {
  kill_and_wait "$PIDFILE"
}

pid() {
  head -1 "$PIDFILE"
}

stop_associated_logging_processes() {
  # shellcheck disable=SC2046
  pkill -g $(get_group_pid)
}

get_group_pid() {
  ps -ho pgrp "$(pid)"
}

case $1 in

  start)
    setup_directories
    send_process_stdout_to_logfile
    send_process_stderr_to_logfile

    pid_guard "$PIDFILE" "Kubernetes API Server"

    echo $$ > $PIDFILE
    start_kube_apiserver
    ;;

  stop)
    stop_associated_logging_processes
    stop_kube_apiserver
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    ;;

esac
