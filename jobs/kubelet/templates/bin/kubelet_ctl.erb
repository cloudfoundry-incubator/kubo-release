#!/bin/bash -ex

NAME="${0##*/}"

export PATH=/var/vcap/packages/kubernetes/bin/:/var/vcap/packages/docker/sbin/:/var/vcap/packages/socat/bin/:$PATH

RUN_DIR=/var/vcap/sys/run/kubernetes
PIDFILE=$RUN_DIR/kubelet.pid
LOG_DIR=/var/vcap/sys/log/kubelet
DATA_DIR=/var/vcap/store/kubernetes

<% iaas = nil %>
<% if_p('cloud-provider') do |cloud_provider| %>
  <% iaas = cloud_provider %>
  cloud_provider="<%= cloud_provider %>"
<% end %>

<% if_link('cloud-provider') do |cloud_provider| %>
    cloud_config="/var/vcap/jobs/kubelet/config/cloud-provider.ini"
    <% cloud_provider.if_p('cloud-provider.gce.service_key') do |service_key| %>
      export GOOGLE_APPLICATION_CREDENTIALS="/var/vcap/jobs/kubelet/config/service_key.json"
    <% end %>
    <% cloud_provider.if_p('cloud-provider.aws.access_key_id') do |access_key_id| %>
    export AWS_ACCESS_KEY_ID="<%= access_key_id %>"
    <% end %>
    <% cloud_provider.if_p('cloud-provider.aws.secret_access_key') do |secret_access_key| %>
    export AWS_SECRET_ACCESS_KEY="<%= secret_access_key %>"
    <% end %>
<% end %>

<%
  labels = ["spec.ip=#{spec.ip}","bosh.id=#{spec.id}","bosh.zone=#{spec.az}"]
  if iaas=="vsphere"
    labels << "failure-domain.beta.kubernetes.io/zone=#{spec.az}"
  end
  if_p("labels") do |node_labels|
    labels += node_labels.map {|k,v| "#{k}=#{v}"}
  end
  labels = labels.join(',')
%>

# shellcheck disable=SC1091
. /var/vcap/packages/pid_utils/pid_utils.sh

setup_directories() {
  mkdir -p "$RUN_DIR" "$LOG_DIR" "$DATA_DIR"
  chown -R vcap:vcap "$RUN_DIR" "$LOG_DIR" "$DATA_DIR"
}

send_process_stdout_to_logfile() {
  exec 1>> "$LOG_DIR/$NAME.stdout.log"
}

send_process_stderr_to_logfile() {
  exec 2>> "$LOG_DIR/$NAME.stderr.log"
}

<% if_p('http_proxy') do |http_proxy| %>
export http_proxy=<%= http_proxy %>
export HTTP_PROXY=<%= http_proxy %>
<% end %>
<% if_p('https_proxy') do |https_proxy| %>
export https_proxy=<%= https_proxy %>
export HTTPS_PROXY=<%= https_proxy %>
<% end %>
<% if_p('no_proxy') do |no_proxy| %>
export no_proxy=<%= no_proxy %>
export NO_PROXY=<%= no_proxy %>
<% end %>

delete_stale_drained_node() {
  local node_name
  node_name=$(kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain get nodes -o wide -L bosh.id | grep "<%= spec.id %>" | grep "NotReady" | awk '{print $1}')
  if [[ ! -z "${node_name}" ]]; then
    kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain delete node "${node_name}" --ignore-not-found
  fi
}

get_hostname_override() {
  if [[ "gce" == "$cloud_provider" ]]; then
    # The hostname needs to be set to the instance name so the gce cloud provider can manage the instance
    hostname_override=$(curl http://metadata.google.internal/computeMetadata/v1/instance/name -H "Metadata-Flavor: Google")
  elif [[ "azure" == "$cloud_provider" ]]; then
    # K8s 1.9 Azure provider assumes  the hostname == nodename and is required to resolve the VM instance ID
    hostname_override=
  else
    hostname_override=<%= spec.ip %>
  fi

  echo $hostname_override
}

start_kubelet() {
  ln -s -f /var/vcap/jobs/kubelet/packages/cni/bin/nsenter /usr/bin/nsenter

  <%-
    include_config = false
    if !iaas.nil? and iaas != "vsphere"
      if_link('cloud-provider') do
        include_config = true
      end
    end
  -%>

  kubelet \
  <%-
    if_p('k8s-args') do |args|
      args.each do |flag, value|
        valueString = ""

        if value.nil?
          # Do nothing to supports args-less flags (--example)
        elsif value.is_a? Array
          valueString = "=#{value.join(",")}"
        elsif value.is_a? Hash
          valueString = "=#{value.map { |k,v| "#{k}=#{v}" }.join(",")}"
        else
          valueString = "=#{value}"
        end
  -%>
    <%= "--#{flag}#{valueString}" %> \
  <%-
      end
    end
  -%>
    <% if include_config -%>--cloud-config=${cloud_config}<% end %> \
    <% if !iaas.nil? -%>--cloud-provider=${cloud_provider}<% end %> \
    --hostname-override=$(get_hostname_override) \
    --node-labels=<%= labels %> \
    --config="/var/vcap/jobs/kubelet/config/kubeletconfig.yml" \
  1>> $LOG_DIR/kubelet.stdout.log \
  2>> $LOG_DIR/kubelet.stderr.log
}

stop_kubelet() {
  kill_and_wait "$PIDFILE"
}

pid() {
  head -1 "$PIDFILE"
}

stop_associated_logging_processes() {
  # shellcheck disable=SC2046
  pkill -g $(get_group_pid)
}

get_group_pid() {
  ps -ho pgrp "$(pid)"
}


case $1 in

  start)

    setup_directories
    send_process_stdout_to_logfile
    send_process_stderr_to_logfile

    pid_guard "$PIDFILE" "Kubelet"

    echo $$ > $PIDFILE

    delete_stale_drained_node
    start_kubelet
    ;;

  stop)
    stop_associated_logging_processes
    stop_kubelet
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    ;;

esac
