#!/bin/bash -e
# vi: ft=sh.eruby

[ -z "$DEBUG" ] || set -x

kubectl="/var/vcap/packages/kubernetes/bin/kubectl --kubeconfig=/var/vcap/jobs/kubelet/config/kubeconfig"

DOCKER_SOCKET=unix:///var/vcap/sys/run/docker/docker.sock
CONTAINER_IMAGE_DIR=/var/vcap/packages/kubernetes/container-images

load_container() {
    path=$1

    echo "loading cached container: ${path}"
    if sudo /var/vcap/jobs/kubelet/packages/docker/bin/docker -H ${DOCKER_SOCKET} load < "${path}"; then
      echo "successfully loaded container: ${path}"
    else
      echo "failed to load container: ${path}"
      exit 1
    fi
}

load_cached_containers() {
    for img in ${CONTAINER_IMAGE_DIR}/*.tgz; do
        load_container ${img}
    done
}

load_cached_containers

TIMEOUT=120

if timeout "$TIMEOUT" /var/vcap/jobs/kubelet/bin/ensure_kubelet_up_and_running
then
  node_name=$($kubectl get nodes -o wide -L bosh.id | grep "<%= spec.id %>$" | grep ' Ready' | awk '{print $1}')
  ${kubectl} uncordon ${node_name}
  ${kubectl} get nodes ${node_name} | grep -e ' Ready '
  echo "kubelet post-start checks succeeded"
else
  echo "kubelet failed post-start checks after $TIMEOUT seconds"
  exit 1
fi

if  [ "$($kubectl get nodes ${node_name} -o jsonpath='{.status.conditions[?(@.type=="NetworkUnavailable")].status}')" ==  "True" ]
then
v="$(cat <<-EOF
{
  "status":{
    "conditions": [
     {
        "type": "NetworkUnavailable",
        "status": "False",
        "reason": "NetworkProvidedByFlannel",
        "message": "Status manually modified by CFCR kubelet post-start"
     }
    ]
  }
}
EOF
)"

  KUBE_TOKEN=$($kubectl  config view -o jsonpath='{.users[?(@.name == "kubelet")].user.token}')
  /usr/bin/curl -sS --cacert /var/vcap/jobs/kubelet/config/apiserver-ca.pem \
  -H "Authorization: Bearer ${KUBE_TOKEN}" \
  -H "Accept: application/json" \
  -H "Content-Type: application/strategic-merge-patch+json" \
  -X PATCH \
  -d "$v" \
  https://master.cfcr.internal:8443/api/v1/nodes/${node_name}/status

  echo "need to patch network availability"
fi
