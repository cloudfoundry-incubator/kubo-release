#!/usr/bin/env bash
# vi: ft=sh

[ -z "$DEBUG" ] || set -x

set -eu

export PATH=/var/vcap/packages/kubernetes/bin:$PATH

LOG_DIR=/var/vcap/sys/log/kubelet
PIDFILE=/var/vcap/sys/run/kubernetes/kubelet.pid

trap ensure_safe_exit EXIT

main() {
  send_process_stdout_to_logfile_and_syslog
  send_process_stderr_to_logfile_and_syslog
  check_if_pidfile_exists
  check_if_pid_is_running

  retry drain_kubelet
  watch_disks
  retry delete_drained_node
}

drain_kubelet() {
  local node_name
  node_name=$(kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain get nodes -o wide -L bosh.id | grep "<%= spec.id %>$" | awk '{print $1}')
  kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain drain "${node_name}" --grace-period 10 --force --delete-local-data  --ignore-daemonsets
}

watch_disks() {
  echo "$(date): checking for attached PVs..."
  ndisks=$(lsblk -dnl -o NAME,TYPE,MOUNTPOINT | awk '/var\/lib\/kubelet/{if($2 == "disk") {print $1, $3}}' | wc -l)
  while (( ndisks != 0 ))
  do
    echo "$(date): ${ndisks} still attached"
    sleep 2

    echo "$(date): checking for attached PVs..."
    ndisks=$(lsblk -dnl -o NAME,TYPE,MOUNTPOINT | awk '/var\/lib\/kubelet/{if($2 == "disk") {print $1, $3}}' | wc -l)
  done
}

delete_drained_node() {
  local node_name
  node_name=$(kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain get nodes -o wide -L bosh.id | grep "<%= spec.id %>$" | awk '{print $1}')
  kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain delete node "${node_name}" --ignore-not-found
}

retry() {
  local attempts_remaining=1
  local max_attempts=10
  local func=$1

  while [[ ${attempts_remaining} -le $max_attempts ]]; do
    if ${func}; then
      echo "Successfully ${func}"
      return 0
    fi
    attempts_remaining=$((attempts_remaining + 1))
    printf "[%s] Unsuccessful ${func}, retrying attempt %d out of %d" "$(date +%s)" "$attempts_remaining" "$max_attempts" >&2
    sleep 1
  done

  echo "Failed all retry attempts for ${func}"
  exit 1
}

ensure_safe_exit() {
  exit_code=$?
  if [[ $exit_code -ne 0 ]]; then
    echo "Kubelet drain failed"
    exit $exit_code
  fi
  echo 0 >&3
}

save_stdout_to_fd3() {
  exec 3>&1
}

send_process_stdout_to_logfile_and_syslog() {
  save_stdout_to_fd3
  exec 1>> "$LOG_DIR/drain.stdout.log"
}

send_process_stderr_to_logfile_and_syslog() {
  exec 2>> "$LOG_DIR/drain.stderr.log"
}

check_if_pid_is_running() {
  local pid
  pid=$(head -1 "$PIDFILE")
  if ! pid_is_running? "${pid}"; then
    echo "$(date) -- Process from pidfile not running, so not attempting to drain."
    exit
  fi
}

pid_is_running?() {
  declare pid="$1"
  ps -p "${pid}" >/dev/null 2>&1
}

check_if_pidfile_exists() {
  if [ ! -e $PIDFILE ]; then
    echo "$(date) -- Pidfile not found, so not attempting to drain."
    exit
  fi
}

kill_node() {
  kill -9 "$(head -1 "$PIDFILE")"
  rm -f $PIDFILE
}

main
