#!/usr/bin/env bash

[ -z "$DEBUG" ] || set -x

export PATH=/var/vcap/packages/kubernetes/bin:$PATH

NAME="${0##*/}"
LOG_DIR=/var/vcap/sys/log/kubelet
PIDFILE=/var/vcap/sys/run/kubernetes/kubelet.pid

exit_code=1
trap ensure_safe_exit EXIT

if [ -e /var/vcap/jobs/cloud-provider/bin/cloud-provider_utils ]; then
  . /var/vcap/jobs/cloud-provider/bin/cloud-provider_utils
  set_node_name
else
  node_name=<%= spec.ip %>
fi

main() {
  send_process_stdout_to_logfile_and_syslog
  send_process_stderr_to_logfile_and_syslog
  check_if_pidfile_exists
  check_if_pid_is_running
  drain_kubelet
  exit_with_code 0
}

exit_with_code() {
  exit_code=$1
  exit
}

ensure_safe_exit() {
  exec 1>&3 2>&4
  echo $exit_code
  exit $exit_code
}

send_process_stdout_to_logfile_and_syslog() {
  exec 3>&1
  exec 1>> "$LOG_DIR/$NAME.stdout.log"
}

send_process_stderr_to_logfile_and_syslog() {
  exec 4>&2
  exec 2>> "$LOG_DIR/$NAME.stderr.log"
}

check_if_pid_is_running() {
  local pid
  pid=$(head -1 "$PIDFILE")
  if ! pid_is_running? "${pid}"; then
    echo "$(date) -- Process from pidfile not running, so not attempting to drain."
    exit_with_code 0
  fi
}

pid_is_running?() {
  declare pid="$1"
  ps -p "${pid}" >/dev/null 2>&1
}

check_if_pidfile_exists() {
  if [ ! -e $PIDFILE ]; then
    echo "$(date) -- Pidfile not found, so not attempting to drain."
    exit_with_code 0
  fi
}

drain_kubelet() {
  kubectl --kubeconfig /var/vcap/jobs/kubeconfig/config/kubeconfig drain "${node_name}" --grace-period 10 --force --delete-local-data
}

kill_node() {
  kill -9 $(head -1 "$PIDFILE")
  rm -f $PIDFILE
}

main
