#!/usr/bin/env bash
# vi: ft=sh

[ -z "$DEBUG" ] || set -x

set -eu

export PATH=/var/vcap/packages/kubernetes/bin:$PATH

LOG_DIR=/var/vcap/sys/log/kubelet
PIDFILE=/var/vcap/sys/run/kubernetes/kubelet.pid

trap ensure_safe_exit EXIT

main() {
  send_process_stdout_to_logfile
  send_process_stderr_to_logfile
  check_if_pidfile_exists
  check_if_pid_is_running

  retry cordon_node
  k8s_disks=$(get_k8s_disks)
  echo "Mounted volumes: $k8s_disks"
  if ! drain_node ; then
    <% if_p("kubelet-drain-force-node") do |prop| %>
      <% if prop %>
        force_kill_pods
      <% else %>
        echo "Unsuccessful function drain_node"
        exit 1
      <% end %>
    <% end %>
  fi

  if [[ -z "${k8s_disks}" ]]; then
    echo "No attached PVs"
  else
    watch_disks "${k8s_disks}"
  fi
  retry delete_drained_node
}

cordon_node() {
  kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain cordon -l "bosh.id=<%= spec.id %>"
}

drain_node() {
  kubectl_args=()
  kubectl_args+=(--kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain drain)
  kubectl_args+=(-l "bosh.id=<%= spec.id %>")
  kubectl_args+=(--grace-period <%= p("kubelet-drain-grace-period") %>)
  kubectl_args+=(--timeout <%= p("kubectl-drain-timeout") %>)

  <% if_p("kubelet-drain-force") do |prop| %>
    <% if prop %>
      kubectl_args+=(--force)
    <% end %>
  <% end %>

  <% if_p("kubelet-drain-ignore-daemonsets") do |prop| %>
    <% if prop %>
      kubectl_args+=(--ignore-daemonsets)
    <% end %>
  <% end %>

  <% if_p("kubelet-drain-delete-local-data") do |prop| %>
    <% if prop %>
      kubectl_args+=(--delete-local-data)
    <% end %>
  <% end %>

  kubectl "${kubectl_args[@]}"
}

force_kill_pods() {
  echo "Forcefully draining the node"
  node_name=$(kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain get node -l "bosh.id=<%= spec.id %>" -o jsonpath="{.items[:].metadata.name}")
  namespaces=( $(kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain get pods --all-namespaces --field-selector spec.nodeName=${node_name} -o jsonpath="{.items[:].metadata.namespace}" | xargs -n1 | sort -u -) )
  for namespace in "${namespaces[@]}"; do
    echo $namespace;
    podnames=( $(kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain get pods -n=${namespace} --field-selector spec.nodeName=${node_name} -o jsonpath="{.items[:].metadata.name}") )
    for pod_name in "${podnames[@]}"; do
      echo "Force Deleting pod ${pod_name}"
      kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain delete pods ${pod_name}  --namespace ${namespace} --grace-period=0 --force
    done
  done
}

get_k8s_disks() {
<%-
  root_dir = p('k8s-args', {}).fetch('root-dir', "/var/lib/kubelet").gsub("/", "\\/")
-%>
  disks=$(lsblk -dnl -o NAME,TYPE,MOUNTPOINT | awk '/<%= root_dir %>/ {print $1}')
  echo ${disks[@]} | tr " " "|"
}

watch_disks() {
  echo "$(date): checking for attached PVs..."
  ndisks=$(lsblk -dnl -o NAME | grep -E "$1" | wc -l)
  while (( ndisks != 0 ))
  do
    echo "$(date): ${ndisks} disks still attached"
    sleep 2

    echo "$(date): checking for attached PVs..."
    ndisks=$(lsblk -dnl -o NAME | grep -E "$1" | wc -l)
  done
}

delete_drained_node() {
  kubectl --kubeconfig /var/vcap/jobs/kubelet/config/kubeconfig-drain delete node \
    -l "bosh.id=<%= spec.id %>" \
    --ignore-not-found
}

retry() {
  local attempts_remaining=1
  local max_attempts=10
  local func=$1

  while [[ ${attempts_remaining} -le $max_attempts ]]; do
    if ${func}; then
      echo "Successfully ${func}"
      return 0
    fi
    attempts_remaining=$((attempts_remaining + 1))
    printf "[%s] Unsuccessful ${func}, retrying attempt %d out of %d" "$(date +%s)" "$attempts_remaining" "$max_attempts" >&2
    sleep 1
  done

  echo "Failed all retry attempts for ${func}"
  exit 1
}

ensure_safe_exit() {
  exit_code=$?
  if [[ $exit_code -ne 0 ]]; then
    echo "Kubelet drain failed"
    exit $exit_code
  fi
  echo 0 >&3
}

save_stdout_to_fd3() {
  exec 3>&1
}

send_process_stdout_to_logfile() {
  save_stdout_to_fd3
  exec 1>> "$LOG_DIR/drain.stdout.log"
}

send_process_stderr_to_logfile() {
  exec 2>> "$LOG_DIR/drain.stderr.log"
}

check_if_pid_is_running() {
  local pid
  pid=$(head -1 "$PIDFILE")
  if ! pid_is_running? "${pid}"; then
    echo "$(date) -- Process from pidfile not running, so not attempting to drain."
    exit
  fi
}

pid_is_running?() {
  declare pid="$1"
  ps -p "${pid}" >/dev/null 2>&1
}

check_if_pidfile_exists() {
  if [ ! -e $PIDFILE ]; then
    echo "$(date) -- Pidfile not found, so not attempting to drain."
    exit
  fi
}

kill_node() {
  kill -9 "$(head -1 "$PIDFILE")"
  rm -f $PIDFILE
}

main
