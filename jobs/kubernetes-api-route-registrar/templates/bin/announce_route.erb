#!/bin/bash -e

exec 10>> /var/vcap/sys/log/kubernetes-api-route-registrar/trace_announce_route.log
export BASH_XTRACEFD=10
export PS4='+\t (${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -x
PATH=/var/vcap/packages/jq/bin/:$PATH

# Job spec config
UAA_API_URL="<%=p('cloud_foundry.uaa_url') %>"
UAA_CLIENT_ID="<%=p('cloud_foundry.uaa_client_id') %>"
UAA_CLIENT_SECRET="<%=p('cloud_foundry.uaa_client_secret') %>"
CLOUD_FOUNDRY_API_URL="<%=p('cloud_foundry.api_url') %>"
BACKEND_PORT="<%=p('backend_port') %>"
BACKEND_IP="<%= spec.ip %>"
KUBO_PORT="<%=p('external_kubo_port') %>"

# Fetch UAA token
UAA_REQUEST=$(curl --fail --max-time 30 -s -k -X POST ${UAA_API_URL}/oauth/token --data "client_id=${UAA_CLIENT_ID}&client_secret=${UAA_CLIENT_SECRET}&grant_type=client_credentials&response_type=token")
UAA_TOKEN=$(echo ${UAA_REQUEST} | jq -r .access_token)

# Find the routing group GUID. Assumes the first one is a TCP router.
ROUTING_GROUP_REQ=$(curl --fail --max-time 30 -s -H "Authorization: bearer ${UAA_TOKEN}" -k ${CLOUD_FOUNDRY_API_URL}/routing/v1/router_groups)
ROUTING_GROUP_GUID=$(echo ${ROUTING_GROUP_REQ} | jq -r .[0].guid )

# Register the route
ROUTE="[{\"router_group_guid\":\"${ROUTING_GROUP_GUID}\",\"backend_port\":${BACKEND_PORT},\"backend_ip\":\"${BACKEND_IP}\",\"port\":${KUBO_PORT}, \"ttl\": 60}]"
NEW_ROUTE_REQ=$(curl --fail --max-time 30 -s -H "Authorization: bearer ${UAA_TOKEN}" -X POST -k ${CLOUD_FOUNDRY_API_URL}/routing/v1/tcp_routes/create -d "${ROUTE}")

echo "Announced: ${ROUTE}"
